name: Multi-Environment CI/CD Pipeline

# Trigger configuration - when this workflow runs
on:
  push:
    branches: [main, dev] # Trigger on both main and dev branches
    paths:
      - 'apps/**'          # Only run if changes in apps directory
      - 'environments/**'  # Only run if changes in environments directory
      - '.github/workflows/**' # Only run if workflow files change

jobs:
  # Job 1: Deploy to Development environment (automatic deployment)
  deploy-dev:
    name: üöÄ Deploy a Dev    
    runs-on: self-hosted    # Uses self-hosted runner (local Kubernetes cluster)
    environment:
      name: dev             # GitHub environment for approvals and secrets
      url: http://dev.local # Environment URL for easy access
    steps:
      # Step 1: Get the source code from repository
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Deploy application using Kustomize to dev namespace
      - name: Deploy to Dev
        run: |
          echo "üöÄ Desplegando en el entorno dev..."
          kubectl apply -k environments/dev  # Apply dev Kustomize configuration
      
      # Step 3: Wait for Kubernetes deployment to complete successfully
      - name: Wait for rollout
        run: |
          echo "‚è≥ Esperando a que termine el despliegue..."
          kubectl rollout status deployment/dev-webapp -n dev --timeout=5m
      
      # Step 4: Verify that pods and services are running correctly
      - name: Verify deployment
        run: |
          echo "‚úÖ Verificando el despliegue..."
          kubectl get pods -n dev -l app=webapp  # Check pod status
          kubectl get svc -n dev                 # Check service status
      
      # Step 5: Confirmation message
      - name: ‚úÖ Dev deployment complete
        run: echo "‚úÖ ¬°Despliegue en dev finalizado!"

  # Job 2: Deploy to Staging environment (runs after dev deployment)
  deploy-staging:
    name: üöÄ Deploy a Staging
    needs: deploy-dev       # This job waits for deploy-dev to complete successfully
    runs-on: self-hosted    # Uses self-hosted runner
    environment:
      name: staging         # GitHub environment for staging
      url: http://staging.local
    steps:
      # Step 1: Get the source code from repository
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Deploy application using Kustomize to staging namespace
      - name: Deploy to Staging
        run: |
          echo "üöÄ Desplegando en el entorno staging..."
          kubectl apply -k environments/staging  # Apply staging Kustomize configuration
      
      # Step 3: Wait for Kubernetes deployment rollout to complete
      - name: Wait for rollout
        run: |
          echo "‚è≥ Esperando a que termine el despliegue..."
          kubectl rollout status deployment/staging-webapp -n staging --timeout=5m
      
      # Step 4: Verify staging deployment health
      - name: Verify staging deployment
        run: |
          echo "‚úÖ Verificando el despliegue..."
          kubectl get pods -n staging -l app=webapp  # Check pod status
          kubectl get svc -n staging                 # Check service status
      
      # Step 5: Confirmation message for staging completion
      - name: ‚úÖ Staging deployment complete
        run: echo "‚úÖ ¬°Despliegue en staging finalizado!"

  # Job 3: Deploy to Production environment (requires manual approval)
  deploy-prod:
    name: üöÄ Deploy a Producci√≥n
    needs: deploy-staging   # This job waits for deploy-staging to complete successfully
    runs-on: self-hosted    # Uses self-hosted runner
    environment:
      name: production      # GitHub environment (should have protection rules for manual approval)
      url: http://prod.local
    steps:
      # Step 1: Get the source code from repository
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Deploy application to production using Kustomize
      - name: Deploy to Production
        run: |
          echo "üöÄ Desplegando en el entorno de producci√≥n..."
          kubectl apply -k environments/prod  # Apply production Kustomize configuration
      
      # Step 3: Wait for production deployment rollout to complete
      - name: Wait for rollout
        run: |
          echo "‚è≥ Esperando a que termine el despliegue..."
          kubectl rollout status deployment/prod-webapp -n prod --timeout=5m
      
      # Step 4: Verify production deployment is healthy and running
      - name: Verify production deployment
        run: |
          echo "‚úÖ Verificando el despliegue..."
          kubectl get pods -n prod -l app=webapp  # Check pod status
          kubectl get svc -n prod                 # Check service status
      
      # Step 5: Final confirmation message for production deployment
      - name: ‚úÖ Production deployment complete
        run: echo "‚úÖ ¬°Despliegue en producci√≥n finalizado!"
