# Kubernetes Deployment for the webapp application
# Deployments manage the desired state of pods, handling rolling updates and scaling
# This deployment ensures the webapp is running with the specified configuration

apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
  labels:
    app: webapp                    # Application identifier label
    managed-by: github-actions     # Indicates this resource is managed by CI/CD pipeline
spec:
  replicas: 2                      # Default number of pod replicas (will be overridden by environments)
  selector:
    matchLabels:
      app: webapp                  # Selector to identify which pods this deployment manages
  template:                        # Pod template specification
    metadata:
      labels:
        app: webapp                # Labels applied to each pod created by this deployment
    spec:
      containers:
      - name: webapp               # Container name within the pod
        image: nginxdemos/hello:latest  # Container image (will be customized per environment)
        ports:
        - containerPort: 80        # Port the container listens on
          name: http               # Named port for easier reference
        env:                       # Environment variables injected into the container
        - name: ENVIRONMENT        # Environment variable name
          valueFrom:               # Get value from external source (ConfigMap)
            configMapKeyRef:
              name: webapp-config  # Name of the ConfigMap
              key: ENVIRONMENT     # Key within the ConfigMap
        - name: VERSION            # Application version environment variable
          valueFrom:
            configMapKeyRef:
              name: webapp-config
              key: VERSION
        resources:                 # Resource constraints for the container
          requests:                # Minimum resources guaranteed to the container
            memory: "64Mi"         # Minimum memory allocation
            cpu: "50m"             # Minimum CPU allocation (50 milliCPU)
          limits:                  # Maximum resources the container can use
            memory: "128Mi"        # Maximum memory limit
            cpu: "100m"            # Maximum CPU limit (100 milliCPU)
        livenessProbe:             # Health check to restart container if it becomes unhealthy
          httpGet:
            path: /                # Health check endpoint path
            port: http             # Port to check (uses named port)
          initialDelaySeconds: 10  # Wait 10 seconds before first check
          periodSeconds: 10        # Check every 10 seconds
        readinessProbe:            # Health check to determine if container is ready to serve traffic
          httpGet:
            path: /                # Readiness check endpoint path
            port: http             # Port to check (uses named port)
          initialDelaySeconds: 5   # Wait 5 seconds before first check
          periodSeconds: 5         # Check every 5 seconds
